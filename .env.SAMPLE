# Frontend root URL
APP_ROOT_URL='http://localhost:3000'
# Backend root URL
VERIFY_ROOT_URL='http://localhost:8000'

# Identify the node, for example one can use the domain
# hosting the app here like: emissions-test.opentaps.org
APP_NODE_ID='blockchain-localnode'

# for the SUPPLY CHAIN REST API
SUPPLY_CHAIN_API_PORT=5000
# API SERVER PORT
API_SERVER_PORT=8000
# Set the CORS, can use comma separated list of domains
API_SERVER_CORS="http://localhost:3000,http://localhost:3007"

METHANE_SERVER_PORT=8007
METHANE_SERVER_CORS="http://localhost:3007"

# Blockchain configuration

# needed for the imported modules and SC call
LEDGER_ETH_JSON_RPC_URL="http://localhost:8545"
# For network supporting MORALIS (like bsc) for event subscription set this and replace the {API_KEY} with MORALIS API KEY
LEDGER_ETH_WS_URL="wss://speedy-nodes-nyc.moralis.io/{API_KEY}/bsc/testnet/ws"
# alternative to MORALIS
#LEDGER_ETH_WS_URL="wss://bsc.getblock.io/testnet/?api_key={API_KEY}"
LEDGER_ETH_NETWORK="hardhat"
LEDGER_EMISSION_TOKEN_CONTRACT_ADDRESS="0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
LEDGER_CARBON_TRACKER_ADDRESS="0x610178dA211FEF7D417bC0e6FeD39F05609AD788"

# the block from which to start fetching events, you'd want to get the contract creation block from a blockchain explorer
# site like etherscan or bscscan eg: https://testnet.bscscan.com/address/0x610178dA211FEF7D417bC0e6FeD39F05609AD788
LEDGER_FIRST_BLOCK="0"

# use for Avalanche testnet
#LEDGER_ETH_JSON_RPC_URL="https://api.avax-test.network/ext/bc/C/rpc"
#LEDGER_ETH_WS_URL="wss://api.avax-test.network/ext/bc/C/ws"
#LEDGER_ETH_NETWORK="avalanchetestnet"
#LEDGER_EMISSION_TOKEN_CONTRACT_ADDRESS="0x91883251A8964dDB40F07Bc55298284a07431d1d"
#LEDGER_FIRST_BLOCK="11573290" # if using the public websockets, pick a recent block from testnet.snowtrace.io
#LEDGER_CARBON_TRACKER="" # Avalanche CarbonTracker here

# use for Goerli testnet
#LEDGER_ETH_JSON_RPC_URL="https://goerli.infura.io/v3/<your-infura-project-id>"
#LEDGER_ETH_WS_URL="wss://goerli.infura.io/ws/v3/<your-infura-project-id>"
#LEDGER_ETH_NETWORK="goerli"
#LEDGER_EMISSION_TOKEN_CONTRACT_ADDRESS="0xE8854ec567b3762046d8f773547f373e6A1A620A"
#LEDGER_FIRST_BLOCK="7385471"
#LEDGER_CARBON_TRACKER_ADDRESS="0xDb80143bCf04B53Ed586b7f806C25ff275b5Cc5b"

# it should be 2048 for Avalanche testnet and could be 5000 for bsc testnet.  2048 seems to work for Goerli
LEDGER_EVENTS_BLOCK_INTERVAL="2048"

# Where to find uploaded documents, relative to the api-server directory:
DOC_UPLOAD_PATH="./upload/"

# For getting information about UPS shipments:
# use live or sandbox
UPS_ENV=live
# credentials
UPS_USER=xxxx
UPS_PASSWORD=xxxx
UPS_KEY=xxxx

# for google APIS, requires the Distance Matrix API for calculating road distance
# and Geocode for calculating longitude/latitude for air distance
# keep it empty for testing, in that case random value between 100 and 2500 (reasonable distances in the USA) will be generated
GOOGLE_KEY=
# reCaptcha v3 Secret Key, optional, the matching Site Key must be set in the app/frontend/react-app/.env
RECAPTCHA_SECRET_KEY=


# Email sending config
# for local testing use https://mailtrap.io/
MAILER_FROM_ADDRESS="noreply@example.com"
MAILER_HOST=""
MAILER_PORT=""
MAILER_USER=""
MAILER_PASS=""
# other config for mail templates content
MAIL_SITE_NAME='Blockchain Carbon Accounting'
MAIL_COMPANY_NAME='Open Source Strategies, Inc.'
MAIL_COMPANY_ADDRESS_1='734 Fairfield Circle'
MAIL_COMPANY_ADDRESS_2='Pasadena CA 91106 USA'
MAIL_SUPPORT_URL='mailto:support@opentaps.com'
MAIL_CONTACT_US_URL='https://www.opensourcestrategies.com/contact-us/'

# optional email address where to BCC verification notifications
VERIFICATION_EMAIL_BCC=""

DB_NAME=blockchain-carbon-accounting
#
# Optional DB config
#
# DB connection user name and password if different from the current shell user
#DB_USER=
#DB_PASSWORD=
# DB database name if different than the default of blockchain-carbon-accounting
#DB_HOST=127.0.0.1
#DB_PORT=5432
# For debugging DB queries
#DB_VERBOSE=Y


# For scripts issuing tokens:

# must silence the keychain logs
KEYCHAIN_NOLOG=Y
# for IPFS connector.  If IPFS daemon is running on a remote machine, SSH tunneling into port 5001 works, instead of changing the IP address here.
IPFS_URL=http://127.0.0.1:5001

# for smart contract
ETH_ISSUE_BY_ACCT=xxxx
ETH_ISSUE_BY_PRIVATE_KEY=xxxx
ETH_ISSUE_FROM_ACCT=xxxx
ETH_ISSUE_TO_ACCT=xxxx

# use this for testing, it have to be changed on the production instance
FIELD_ENCRYPTION_KEY=CMnPqnLwg9FgswmkMvpFzL3Tkch3LnRjCW7qzFqmm9WMt
