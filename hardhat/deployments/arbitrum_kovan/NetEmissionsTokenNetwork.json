{
  "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RegisteredDealer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retiredBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dateCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRetired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredConsumer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnregisteredDealer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_CONSUMER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_EMISSIONS_AUDITOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_OFFSET_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTERED_REC_DEALER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableAndRetired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfUniqueTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "tokenTypeId",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thruDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dateCreated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "automaticRetireDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "manifest",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenRetiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isConsumerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isDealerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thruDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "automaticRetireDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "manifest",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "issueFromDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "registerConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "registerDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfDestruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_limitedMode",
          "type": "bool"
        }
      ],
      "name": "setLimitedMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unregisterConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenTypeId",
          "type": "uint8"
        }
      ],
      "name": "unregisterDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
  "receipt": {
    "to": null,
    "from": "0xD32E793008B0FbD13C889E291bc049483Da316bA",
    "contractAddress": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
    "transactionIndex": 1,
    "gasUsed": "640430",
    "logsBloom": "0x
    "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc",
    "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x5e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5f",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6099,
        "transactionHash": "0x626dd8baa909ac1faf0e07ad2a90a69c9420b71f1f1b632f2f04663b5c25f608",
        "address": "0x0D4F2bbE6d6A035769A97C72BD8bBeBE2338C500",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12c",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba",
          "0x000000000000000000000000d32e793008b0fbd13c889e291bc049483da316ba"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x766969c8d2345567e46db2a4e8b0adafb1c381bd74091170c2695306d42f21dc"
      }
    ],
    "blockNumber": 6099,
    "cumulativeGasUsed": "849154",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD32E793008B0FbD13C889E291bc049483Da316bA"
  ],
  "solcInputHash": "9d397bde5cc4731109e1dba26d174139",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RegisteredDealer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retiredBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredConsumer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnregisteredDealer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_CONSUMER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_EMISSIONS_AUDITOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_OFFSET_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED_REC_DEALER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableAndRetired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfUniqueTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct NetEmissionsTokenNetwork.CarbonTokenDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRetiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isConsumerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDealerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thruDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"automaticRetireDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"manifest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"issueFromDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"registerDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitedMode\",\"type\":\"bool\"}],\"name\":\"setLimitedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenTypeId\",\"type\":\"uint8\"}],\"name\":\"unregisterDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getIssuer(uint256)\":{\"details\":\"returns issuer of a given tokenId\"},\"getNumOfUniqueTokens()\":{\"details\":\"returns number of unique tokens\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoles(address)\":{\"details\":\"Helper function for returning tuple of bools of role membership\",\"params\":{\"account\":\"address to check roles\"}},\"getTokenDetails(uint256)\":{\"details\":\"returns the entire details of a given tokenId\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenRetiredAmount(address,uint256)\":{\"details\":\"returns the retired amount on a token\",\"params\":{\"tokenId\":\"token to check\"}},\"getTokenType(uint256)\":{\"details\":\"returns the token name for the given token as a string value\",\"params\":{\"tokenId\":\"token to check\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isConsumerRegistered(address)\":{\"details\":\"returns true if Consumers's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"isDealerRegistered(address)\":{\"details\":\"returns true if Dealer's account is registered\",\"params\":{\"account\":\"address of the dealer\"}},\"issue(address,uint8,uint256,uint256,uint256,uint256,string,string,string)\":{\"details\":\"External function to mint an amount of a token Only authorized dealer of associated token type can call this function\",\"params\":{\"quantity\":\"of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\"}},\"issueFromDAO(address,address,uint8,uint256,uint256,uint256,uint256,string,string,string)\":{\"details\":\"Issue function for DAO to use proposer as issuer Must be called from Timelock contract through a successful proposal\"},\"registerConsumer(address)\":{\"details\":\"returns true if Consumer's account is registered for the given token\",\"params\":{\"account\":\"address of the consumer\"}},\"registerDealer(address,uint8)\":{\"details\":\"Only contract owner can register Dealers\",\"params\":{\"account\":\"address of the dealer to register Only registered Dealers can transfer tokens\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"retire(uint256,uint256)\":{\"details\":\"sets the token to the retire state to disable transfers, mints and burns\",\"params\":{\"tokenId\":\"token to set in pause state   Only contract owner can pause or resume tokens\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transfer(address,uint256,uint256)\":{\"details\":\"transfers the value to the 'to' account for tokenId\",\"params\":{\"to\":\"recipient address\",\"tokenId\":\"tokenId for the transfer\",\"value\":\"amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks\"}},\"unregisterConsumer(address)\":{\"details\":\"Only contract owner can unregister Consumers\",\"params\":{\"account\":\"address to be unregistered\"}},\"unregisterDealer(address,uint8)\":{\"details\":\"Only contract owner can unregister Dealers\",\"params\":{\"account\":\"address to be unregistered\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetEmissionsTokenNetwork.sol\":\"NetEmissionsTokenNetwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xd6b90e604fb2eb2d641c7110c72440bf2dc999ec6ab8ff60f200e71ca75d1d90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xe7fff2c63a8ae715484391eb8626588e27194d7b5b1bf4b60e413b7e1f84b3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/NetEmissionsTokenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\ncontract NetEmissionsTokenNetwork is ERC1155, AccessControl {\\n\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bool private limitedMode = false;\\n\\n    // Generic dealer role for registering/unregistering consumers\\n    bytes32 public constant REGISTERED_DEALER =\\n        keccak256(\\\"REGISTERED_DEALER\\\");\\n    // Token type specific roles\\n    bytes32 public constant REGISTERED_REC_DEALER =\\n        keccak256(\\\"REGISTERED_REC_DEALER\\\");\\n    bytes32 public constant REGISTERED_OFFSET_DEALER =\\n        keccak256(\\\"REGISTERED_OFFSET_DEALER\\\");\\n    bytes32 public constant REGISTERED_EMISSIONS_AUDITOR =\\n        keccak256(\\\"REGISTERED_EMISSIONS_AUDITOR\\\");\\n    // Consumer role\\n    bytes32 public constant REGISTERED_CONSUMER =\\n        keccak256(\\\"REGISTERED_CONSUMER\\\");\\n\\n    /**\\n     * @dev Structure of all tokens issued in this contract\\n     * tokenId - Auto-increments whenever new tokens are issued\\n     * tokenTypeId - Corresponds to the three token types:\\n     *   1 => Renewable Energy Certificate\\n     *   2 => Carbon Emissions Offset\\n     *   3 => Audited Emissions\\n     * issuer - Address of dealer issuing this token\\n     * issuee - Address of original issued recipient this token\\n     * fromDate - Unix timestamp\\n     * thruDate - Unix timestamp\\n     * dateCreated - Unix timestamp\\n     * automaticRetireDate - Unix timestamp\\n     */\\n    struct CarbonTokenDetails {\\n        uint256 tokenId;\\n        uint8 tokenTypeId;\\n        address issuer;\\n        address issuee;\\n        uint256 fromDate;\\n        uint256 thruDate;\\n        uint256 dateCreated;\\n        uint256 automaticRetireDate;\\n        string metadata;\\n        string manifest;\\n        string description;\\n    }\\n\\n    mapping(uint256 => CarbonTokenDetails) private _tokenDetails;\\n    mapping(uint256 => mapping(address => uint256)) private _retiredBalances;\\n\\n    address private timelock = address(0);\\n\\n    // Counts number of unique token IDs (auto-incrementing)\\n    Counters.Counter private _numOfUniqueTokens;\\n\\n    string[] private _TOKEN_TYPES  = [\\n        \\\"Renewable Energy Certificate\\\",\\n        \\\"Carbon Emissions Offset\\\",\\n        \\\"Audited Emissions\\\"\\n    ];\\n\\n    // events\\n    event TokenCreated(\\n        uint256 availableBalance,\\n        uint256 retiredBalance,\\n        uint256 tokenId,\\n        uint8 tokenTypeId,\\n        address indexed issuer,\\n        address indexed issuee,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 dateCreated,\\n        uint256 automaticRetireDate,\\n        string metadata,\\n        string manifest,\\n        string description\\n    );\\n    event TokenRetired(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event RegisteredConsumer(address indexed account);\\n    event UnregisteredConsumer(address indexed account);\\n    event RegisteredDealer(address indexed account);\\n    event UnregisteredDealer(address indexed account);\\n\\n    // Replaces constructor in OpenZeppelin Upgrades\\n    constructor(address admin) ERC1155(\\\"\\\") {\\n\\n        // Allow dealers to register consumers\\n        _setRoleAdmin(REGISTERED_CONSUMER, REGISTERED_DEALER);\\n\\n        // Set-up admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _setupRole(REGISTERED_DEALER, admin);\\n        _setupRole(REGISTERED_REC_DEALER, admin);\\n        _setupRole(REGISTERED_OFFSET_DEALER, admin);\\n        _setupRole(REGISTERED_EMISSIONS_AUDITOR, admin);\\n    }\\n\\n    modifier consumerOrDealer() {\\n        bool isConsumer = hasRole(REGISTERED_CONSUMER, msg.sender);\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, msg.sender);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, msg.sender);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender);\\n\\n        require(\\n            isConsumer || isRecDealer || isCeoDealer || isAeDealer,\\n            \\\"CLM8::consumerOrDealer: msg.sender not a consumer or a dealer\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier onlyDealer() {\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, msg.sender);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, msg.sender);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, msg.sender);\\n\\n        require(\\n            isRecDealer || isCeoDealer || isAeDealer,\\n            \\\"CLM8::onlyDealer: msg.sender not a dealer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CLM8::onlyAdmin: msg.sender not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyDAO() {\\n        require(\\n            msg.sender == timelock,\\n            \\\"CLM8::onlyDAO: You are not the DAO\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenId exists\\n     */\\n    function tokenExists(uint256 tokenId) private view returns (bool) {\\n        if (_numOfUniqueTokens.current() >= tokenId) return true;\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns true if the tokenTypeId is valid\\n     */\\n    function tokenTypeIdIsValid(uint8 tokenTypeId) private view returns (bool) {\\n        if ((tokenTypeId > 0) && (tokenTypeId <= _TOKEN_TYPES.length)) {\\n            return true;\\n        }\\n        return false; // no matching tokenId\\n    }\\n\\n    /**\\n     * @dev returns number of unique tokens\\n     */\\n    function getNumOfUniqueTokens() public view returns (uint256) {\\n        return _numOfUniqueTokens.current();\\n    }\\n\\n    /**\\n     * @dev hook to prevent transfers from non-admin account if limitedMode is on\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        override\\n    {\\n        if (limitedMode) {\\n            require(\\n                hasRole(DEFAULT_ADMIN_ROLE, operator),\\n                \\\"CLM8::_beforeTokenTransfer: limited mode on: only admin can transfer tokens\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev External function to mint an amount of a token\\n     * Only authorized dealer of associated token type can call this function\\n     * @param quantity of the token to mint For ex: if one needs 100 full tokens, the caller\\n     * should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)\\n     */\\n    function issue(\\n        address issuee,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public onlyDealer {\\n        return _issue(\\n            issuee,\\n            msg.sender,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    /**\\n     * @dev Issue function for DAO to use proposer as issuer\\n     * Must be called from Timelock contract through a successful proposal\\n     */\\n    function issueFromDAO(\\n        address issuee,\\n        address proposer,\\n        uint8 tokenTypeId,\\n        uint256 quantity,\\n        uint256 fromDate,\\n        uint256 thruDate,\\n        uint256 automaticRetireDate,\\n        string memory metadata,\\n        string memory manifest,\\n        string memory description\\n    ) public onlyDAO {\\n        return _issue(\\n            issuee,\\n            proposer,\\n            tokenTypeId,\\n            quantity,\\n            fromDate,\\n            thruDate,\\n            automaticRetireDate,\\n            metadata,\\n            manifest,\\n            description\\n        );\\n    }\\n\\n    function _issue(\\n        address _issuee,\\n        address _issuer,\\n        uint8 _tokenTypeId,\\n        uint256 _quantity,\\n        uint256 _fromDate,\\n        uint256 _thruDate,\\n        uint256 _automaticRetireDate,\\n        string memory _metadata,\\n        string memory _manifest,\\n        string memory _description\\n    ) internal {\\n\\n        require(\\n            tokenTypeIdIsValid(_tokenTypeId),\\n            \\\"CLM8::_issue: tokenTypeId is invalid\\\"\\n        );\\n\\n        if (limitedMode) {\\n            if (_tokenTypeId != 3 ) {\\n                require(\\n                    _issuer == timelock,\\n                    \\\"CLM8::_issue: limited mode on: issuer not timelock\\\"\\n                );\\n                require(\\n                    hasRole(DEFAULT_ADMIN_ROLE, _issuee),\\n                    \\\"CLM8::_issue: limited mode on: issuee not admin\\\"\\n                );\\n            }\\n        }\\n\\n        if (_tokenTypeId == 1) {\\n            require(\\n                hasRole(REGISTERED_REC_DEALER, _issuer),\\n                \\\"CLM8::_issue: issuer not a registered REC dealer\\\"\\n            );\\n        } else if (_tokenTypeId == 2) {\\n            require(\\n                hasRole(REGISTERED_OFFSET_DEALER, _issuer),\\n                \\\"CLM8::_issue: issuer not a registered offset dealer\\\"\\n            );\\n        } else {\\n            require(\\n                hasRole(REGISTERED_EMISSIONS_AUDITOR, _issuer),\\n                \\\"CLM8::_issue: issuer not a registered emissions auditor\\\"\\n            );\\n        }\\n\\n        // increment token identifier\\n        _numOfUniqueTokens.increment();\\n\\n        // create token details\\n        CarbonTokenDetails storage tokenInfo = _tokenDetails[_numOfUniqueTokens.current()];\\n\\n        tokenInfo.tokenId = _numOfUniqueTokens.current();\\n        tokenInfo.tokenTypeId = _tokenTypeId;\\n        tokenInfo.issuee = _issuee;\\n        tokenInfo.issuer = _issuer;\\n        tokenInfo.fromDate = _fromDate;\\n        tokenInfo.thruDate = _thruDate;\\n        tokenInfo.automaticRetireDate = _automaticRetireDate;\\n        tokenInfo.dateCreated = block.timestamp;\\n        tokenInfo.metadata = _metadata;\\n        tokenInfo.manifest = _manifest;\\n        tokenInfo.description = _description;\\n\\n        super._mint(_issuee, _numOfUniqueTokens.current(), _quantity, \\\"\\\");\\n\\n        // retire audited emissions on mint\\n        if (_tokenTypeId == 3) {\\n            super._burn(tokenInfo.issuee, tokenInfo.tokenId, _quantity);\\n            _retiredBalances[tokenInfo.tokenId][tokenInfo.issuee] = _retiredBalances[tokenInfo.tokenId][tokenInfo.issuee].add(_quantity);\\n        }\\n\\n        // emit event with all token details and balances\\n        emit TokenCreated(\\n            _quantity,\\n            _retiredBalances[tokenInfo.tokenId][tokenInfo.issuee],\\n            tokenInfo.tokenId,\\n            tokenInfo.tokenTypeId,\\n            tokenInfo.issuer,\\n            tokenInfo.issuee,\\n            tokenInfo.fromDate,\\n            tokenInfo.thruDate,\\n            tokenInfo.automaticRetireDate,\\n            tokenInfo.dateCreated,\\n            tokenInfo.metadata,\\n            tokenInfo.manifest,\\n            tokenInfo.description\\n        );\\n    }\\n\\n    /**\\n     * @dev returns the token name for the given token as a string value\\n     * @param tokenId token to check\\n     */\\n    function getTokenType(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenType: tokenId does not exist\\\");\\n        string memory tokenType =\\n            _TOKEN_TYPES[(_tokenDetails[tokenId].tokenTypeId - 1)];\\n        return tokenType;\\n    }\\n\\n    /**\\n     * @dev returns the retired amount on a token\\n     * @param tokenId token to check\\n     */\\n    function getTokenRetiredAmount(address account, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(tokenExists(tokenId), \\\"CLM8::getTokenRetiredAmount: tokenId does not exist\\\");\\n        uint256 amount = _retiredBalances[tokenId][account];\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev sets the token to the retire state to disable transfers, mints and burns\\n     * @param tokenId token to set in pause state\\n     *   Only contract owner can pause or resume tokens\\n     */\\n    function retire(\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external consumerOrDealer {\\n        require(tokenExists(tokenId), \\\"CLM8::retire: tokenId does not exist\\\");\\n        require( (amount <= super.balanceOf(msg.sender, tokenId)), \\\"CLM8::retire: not enough available balance to retire\\\" );\\n\\n        super._burn(msg.sender, tokenId, amount);\\n        _retiredBalances[tokenId][msg.sender] = _retiredBalances[tokenId][msg.sender].add(amount);\\n        emit TokenRetired(\\n            msg.sender,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev returns true if Dealer's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isDealerRegistered(address account) public view returns (bool) {\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, account);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, account);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        if (isRecDealer || isCeoDealer || isAeDealer) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's account is registered\\n     * @param account address of the dealer\\n     */\\n    function isConsumerRegistered(address account) public view returns (bool) {\\n        return hasRole(REGISTERED_CONSUMER, account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumers's or Dealer's account is registered\\n     * @param account address of the consumer/dealer\\n     */\\n    function isDealerOrConsumer(address account) private view returns (bool) {\\n        return (isDealerRegistered(account) || isConsumerRegistered(account));\\n    }\\n\\n    /**\\n     * @dev Helper function for returning tuple of bools of role membership\\n     * @param account address to check roles\\n     */\\n    function getRoles(address account) external view returns (bool, bool, bool, bool, bool) {\\n        bool isAdmin = hasRole(DEFAULT_ADMIN_ROLE, account);\\n        bool isRecDealer = hasRole(REGISTERED_REC_DEALER, account);\\n        bool isCeoDealer = hasRole(REGISTERED_OFFSET_DEALER, account);\\n        bool isAeDealer = hasRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        bool isConsumer = hasRole(REGISTERED_CONSUMER, account);\\n        return (isAdmin, isRecDealer, isCeoDealer, isAeDealer, isConsumer);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can register Dealers\\n     * @param account address of the dealer to register\\n     * Only registered Dealers can transfer tokens\\n     */\\n    function registerDealer(address account, uint8 tokenTypeId)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::registerDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            grantRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            grantRole(REGISTERED_OFFSET_DEALER, account);\\n        } else {\\n            grantRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        }\\n        // Also grant generic dealer role for registering/unregistering consumers\\n        grantRole(REGISTERED_DEALER, account);\\n        emit RegisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev returns true if Consumer's account is registered for the given token\\n     * @param account address of the consumer\\n     */\\n    function registerConsumer(address account) external onlyDealer {\\n        grantRole(REGISTERED_CONSUMER, account);\\n        emit RegisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Dealers\\n     * @param account address to be unregistered\\n     */\\n    function unregisterDealer(address account, uint8 tokenTypeId)\\n        external\\n        onlyAdmin\\n    {\\n        require(tokenTypeIdIsValid(tokenTypeId), \\\"CLM8::unregisterDealer: tokenTypeId does not exist\\\");\\n        if (tokenTypeId == 1) {\\n            super.revokeRole(REGISTERED_REC_DEALER, account);\\n        } else if (tokenTypeId == 2) {\\n            super.revokeRole(REGISTERED_OFFSET_DEALER, account);\\n        } else {\\n            super.revokeRole(REGISTERED_EMISSIONS_AUDITOR, account);\\n        }\\n\\n        // If no longer a dealer of any token type, remove generic dealer role\\n        if (!isDealerRegistered(account)) {\\n            revokeRole(REGISTERED_DEALER, account);\\n        }\\n\\n        emit UnregisteredDealer(account);\\n    }\\n\\n    /**\\n     * @dev Only contract owner can unregister Consumers\\n     * @param account address to be unregistered\\n     */\\n    function unregisterConsumer(address account) external onlyDealer {\\n        super.revokeRole(REGISTERED_CONSUMER, account);\\n        emit UnregisteredConsumer(account);\\n    }\\n\\n    /**\\n     * @dev transfers the value to the 'to' account for tokenId\\n     * @param to recipient address\\n     * @param tokenId tokenId for the transfer\\n     * @param value amount of transfer\\n     * Transfer can start only when both parties are registered and the token is not paused\\n     * Note: Token holders can arbitrarily call safeTransferFrom() without these checks\\n     */\\n    function transfer(\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external consumerOrDealer {\\n        require(tokenExists(tokenId), \\\"CLM8::transfer: tokenId does not exist\\\");\\n        require((msg.sender != to), \\\"CLM8::transfer: sender and receiver cannot be the same\\\");\\n        super.safeTransferFrom(msg.sender, to, tokenId, value, \\\"0x00\\\");\\n    }\\n\\n    function setTimelock(\\n        address _timelock\\n    ) external onlyAdmin {\\n        timelock = _timelock;\\n    }\\n\\n    function getAvailableAndRetired(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 available = super.balanceOf(account, tokenId);\\n        uint256 retired = this.getTokenRetiredAmount(account, tokenId);\\n        return (available, retired);\\n    }\\n\\n    /**\\n     * @dev returns issuer of a given tokenId\\n     */\\n    function getIssuer(uint256 tokenId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _tokenDetails[tokenId].issuer;\\n    }\\n\\n    /**\\n     * @dev returns the entire details of a given tokenId\\n     * @param tokenId token to check\\n     */\\n    function getTokenDetails(uint256 tokenId)\\n        external\\n        view\\n        returns (CarbonTokenDetails memory)\\n    {\\n        return _tokenDetails[tokenId];\\n    }\\n\\n    function selfDestruct()\\n        external\\n        onlyAdmin\\n    {\\n        selfdestruct(payable(address(this)));\\n    }\\n\\n    function setLimitedMode(bool _limitedMode)\\n        external\\n        onlyAdmin\\n    {\\n        limitedMode = _limitedMode;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x882690be66dc395b0db4ef1b8a3ed86824c5c86a17e70893ba3e06cdacef39a0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6005805460ff19169055600880546001600160a01b0319169055601c60e09081527f52656e657761626c6520456e657267792043657274696669636174650000000061010052608090815260176101209081527f436172626f6e20456d697373696f6e73204f66667365740000000000000000006101405260a0526101a06040526011610160908152704175646974656420456d697373696f6e7360781b6101805260c052620000b490600a906003620003f6565b50348015620000c257600080fd5b50604051620045a4380380620045a4833981016040819052620000e5916200055e565b604080516020810190915260008152620001066301ffc9a760e01b62000224565b62000111816200027f565b62000123636cdb3d1360e11b62000224565b620001356303a24d0760e21b62000224565b50620001717f5e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76a6000805160206200458483398151915262000298565b6200017e600082620002ea565b620001996000805160206200458483398151915282620002ea565b620001c57f2ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d86082620002ea565b620001f17fede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5f82620002ea565b6200021d7fe97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12c82620002ea565b50620005c5565b6001600160e01b031980821614156200025a5760405162461bcd60e51b815260040162000251906200058e565b60405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8051620002949060039060208401906200045a565b5050565b600082815260046020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526004602052604090912060020155565b62000294828260008281526004602090815260409091206200031791839062001ba76200036b821b17901c565b156200029457620003276200038b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000382836001600160a01b0384166200038f565b90505b92915050565b3390565b60006200039d8383620003de565b620003d55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000385565b50600062000385565b60009081526001919091016020526040902054151590565b82805482825590600052602060002090810192821562000448579160200282015b82811115620004485782518051620004379184916020909101906200045a565b509160200191906001019062000417565b5062000456929150620004db565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049d57805160ff1916838001178555620004cd565b82800160010185558215620004cd579182015b82811115620004cd578251825591602001919060010190620004b0565b5062000456929150620004fc565b8082111562000456576000620004f2828262000513565b50600101620004db565b5b80821115620004565760008155600101620004fd565b50805460018160011615610100020316600290046000825580601f106200053b57506200055b565b601f0160209004906000526020600020908101906200055b9190620004fc565b50565b60006020828403121562000570578081fd5b81516001600160a01b038116811462000587578182fd5b9392505050565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b613faf80620005d56000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c806378e5c59211610146578063bdacb303116100c3578063ddc3e6eb11610087578063ddc3e6eb1461051b578063e2e564f21461052e578063e985e9c514610541578063f242432a14610554578063fcba794814610567578063fd0c4a9a1461056f57610252565b8063bdacb3031461049e578063c1e03728146104b1578063ca15c873146104d1578063ce6ccfaf146104e4578063d547741f1461050857610252565b80639cb8a26a1161010a5780639cb8a26a14610455578063a0d975a71461045d578063a217fddf14610470578063a22cb46514610478578063a53b5dd91461048b57610252565b806378e5c592146103e65780637f157c9b146103ee5780639010d07c1461040f57806391d148541461042f57806392089c461461044257610252565b806331aa4b20116101d457806353dbe9821161019857806353dbe9821461039d5780635ddb368f146103b057806369f7ef44146103b857806376aed2e1146103cb57806376ce4755146103de57610252565b806331aa4b201461033157806333781a0e1461034457806336568abe1461035757806344b22fdd1461036a5780634e1273f41461037d57610252565b80631ef68ef71161021b5780631ef68ef7146102dd578063248a9ca3146102e5578063293a7f2e146102f85780632eb2c2d61461030b5780632f2ff15d1461031e57610252565b8062fdd58e1461025757806301ffc9a714610280578063095bcdb6146102a05780630e89341c146102b557806318a50d7e146102d5575b600080fd5b61026a610265366004612bdb565b610582565b6040516102779190613122565b60405180910390f35b61029361028e366004612e71565b6105de565b60405161027791906130ee565b6102b36102ae366004612c05565b610601565b005b6102c86102c3366004612e14565b610726565b604051610277919061312b565b61026a6107be565b61026a6107e2565b61026a6102f3366004612e14565b6107f4565b6102b3610306366004612e50565b610809565b6102b36103193660046129af565b61098a565b6102b361032c366004612e2c565b610ba4565b6102b361033f366004612c38565b610bec565b610293610352366004612960565b610cff565b6102b3610365366004612e2c565b610d19565b6102b3610378366004612960565b610d5b565b61039061038b366004612d32565b610e2e565b60405161027791906130ad565b6102b36103ab366004612960565b610f6e565b61026a611041565b6102936103c6366004612960565b611053565b6102c86103d9366004612e14565b6110d5565b61026a6111c3565b61026a6111d5565b6104016103fc366004612bdb565b6111e7565b604051610277929190613ced565b61042261041d366004612e50565b61127e565b6040516102779190612fdd565b61029361043d366004612e2c565b61129d565b610422610450366004612e14565b6112b5565b6102b36112d8565b61026a61046b366004612bdb565b611302565b61026a611351565b6102b3610486366004612ba0565b611356565b6102b3610499366004612abe565b611424565b6102b36104ac366004612960565b61146c565b6104c46104bf366004612e14565b6114b5565b6040516102779190613c15565b61026a6104df366004612e14565b6116f3565b6104f76104f2366004612960565b61170a565b6040516102779594939291906130f9565b6102b3610516366004612e2c565b61179e565b6102b3610529366004612df4565b6117d8565b6102b361053c366004612c38565b611812565b61029361054f36600461297b565b611932565b6102b3610562366004612a59565b611960565b61026a611af4565b6102b361057d366004612c63565b611b06565b60006001600160a01b0383166105b35760405162461bcd60e51b81526004016105aa90613306565b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b600061061b600080516020613ef08339815191523361129d565b90506000610637600080516020613f3a8339815191523361129d565b90506000610653600080516020613ed08339815191523361129d565b9050600061066f600080516020613f5a8339815191523361129d565b9050838061067a5750825b806106825750815b8061068a5750805b6106a65760405162461bcd60e51b81526004016105aa90613b25565b6106af86611bbc565b6106cb5760405162461bcd60e51b81526004016105aa906137c2565b336001600160a01b03881614156106f45760405162461bcd60e51b81526004016105aa9061371c565b61071d33888888604051806040016040528060048152602001630307830360e41b815250611960565b50505050505050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b50505050509050919050565b7ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf381565b600080516020613ed083398151915281565b60009081526004602052604090206002015490565b6000610823600080516020613ef08339815191523361129d565b9050600061083f600080516020613f3a8339815191523361129d565b9050600061085b600080516020613ed08339815191523361129d565b90506000610877600080516020613f5a8339815191523361129d565b905083806108825750825b8061088a5750815b806108925750805b6108ae5760405162461bcd60e51b81526004016105aa90613b25565b6108b786611bbc565b6108d35760405162461bcd60e51b81526004016105aa906133a2565b6108dd3387610582565b8511156108fc5760405162461bcd60e51b81526004016105aa906135ee565b610907338787611bde565b600086815260076020908152604080832033845290915290205461092b9086611cf4565b60008781526007602090815260408083203380855292529182902092909255517f8f1b5ebb586d3d169e4ed07db9cd10ce0dd30c7b656171310eae7517c0b53cf99061097a9089908990613ced565b60405180910390a2505050505050565b81518351146109ab5760405162461bcd60e51b81526004016105aa90613a9c565b6001600160a01b0384166109d15760405162461bcd60e51b81526004016105aa90613642565b6109d9611d19565b6001600160a01b0316856001600160a01b031614806109ff57506109ff8561054f611d19565b610a1b5760405162461bcd60e51b81526004016105aa90613687565b6000610a25611d19565b9050610a35818787878787611d1d565b60005b8451811015610b36576000858281518110610a4f57fe5b602002602001015190506000858381518110610a6757fe5b60200260200101519050610ad4816040518060600160405280602a8152602001613f10602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611d4f9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610b0b9082611cf4565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610a38565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610b869291906130c0565b60405180910390a4610b9c818787878787611d7b565b505050505050565b600082815260046020526040902060020154610bc29061043d611d19565b610bde5760405162461bcd60e51b81526004016105aa9061321c565b610be88282611e89565b5050565b610bf760003361129d565b610c135760405162461bcd60e51b81526004016105aa90613502565b610c1c81611ef2565b610c385760405162461bcd60e51b81526004016105aa90613772565b8060ff1660011415610c6157610c5c600080516020613f3a83398151915283610ba4565b610c9d565b8060ff1660021415610c8557610c5c600080516020613ed083398151915283610ba4565b610c9d600080516020613f5a83398151915283610ba4565b610cc77ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf383610ba4565b6040516001600160a01b038316907fa8377deee15954185683d55effd369508b4935978c8cb2bab790bf04c570181490600090a25050565b60006105d8600080516020613ef08339815191528361129d565b610d21611d19565b6001600160a01b0316816001600160a01b031614610d515760405162461bcd60e51b81526004016105aa90613bc6565b610be88282611f18565b6000610d75600080516020613f3a8339815191523361129d565b90506000610d91600080516020613ed08339815191523361129d565b90506000610dad600080516020613f5a8339815191523361129d565b90508280610db85750815b80610dc05750805b610ddc5760405162461bcd60e51b81526004016105aa9061326b565b610df4600080516020613ef083398151915285610ba4565b6040516001600160a01b038516907f69a0adee259d26fe61f4776f7bea7f3a9737c7321256821b985f988545efd31990600090a250505050565b60608151835114610e515760405162461bcd60e51b81526004016105aa90613a03565b6060835167ffffffffffffffff81118015610e6b57600080fd5b50604051908082528060200260200182016040528015610e95578160200160208202803683370190505b50905060005b8451811015610f665760006001600160a01b0316858281518110610ebb57fe5b60200260200101516001600160a01b03161415610eea5760405162461bcd60e51b81526004016105aa90613351565b60016000858381518110610efa57fe5b602002602001015181526020019081526020016000206000868381518110610f1e57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610f5357fe5b6020908102919091010152600101610e9b565b509392505050565b6000610f88600080516020613f3a8339815191523361129d565b90506000610fa4600080516020613ed08339815191523361129d565b90506000610fc0600080516020613f5a8339815191523361129d565b90508280610fcb5750815b80610fd35750805b610fef5760405162461bcd60e51b81526004016105aa9061326b565b611007600080516020613ef08339815191528561179e565b6040516001600160a01b038516907f03a38088da75ee2d80f6c753f55f8fd17602ae17d8bd0ef44d5e1f28ab5af11f90600090a250505050565b600061104d6009611f81565b90505b90565b60008061106e600080516020613f3a8339815191528461129d565b9050600061108a600080516020613ed08339815191528561129d565b905060006110a6600080516020613f5a8339815191528661129d565b905082806110b15750815b806110b95750805b156110ca57600193505050506105fc565b506000949350505050565b60606110e082611bbc565b6110fc5760405162461bcd60e51b81526004016105aa906134b8565b600082815260066020526040902060010154600a805460609260001960ff918216011690811061112857fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156111b65780601f1061118b576101008083540402835291602001916111b6565b820191906000526020600020905b81548152906001019060200180831161119957829003601f168201915b5093979650505050505050565b600080516020613f5a83398151915281565b600080516020613ef083398151915281565b60008060006111f68585610582565b60405163a0d975a760e01b8152909150600090309063a0d975a7906112219089908990600401613094565b60206040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190612ea9565b9196919550909350505050565b60008281526004602052604081206112969083611f85565b9392505050565b60008281526004602052604081206112969083611f91565b60009081526006602052604090206001015461010090046001600160a01b031690565b6112e360003361129d565b6112ff5760405162461bcd60e51b81526004016105aa90613502565b30ff5b600061130d82611bbc565b6113295760405162461bcd60e51b81526004016105aa906138b4565b5060009081526007602090815260408083206001600160a01b03949094168352929052205490565b600081565b816001600160a01b0316611368611d19565b6001600160a01b0316141561138f5760405162461bcd60e51b81526004016105aa906139ba565b806002600061139c611d19565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113e0611d19565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161141891906130ee565b60405180910390a35050565b6008546001600160a01b0316331461144e5760405162461bcd60e51b81526004016105aa90613978565b6114608a8a8a8a8a8a8a8a8a8a611fa6565b50505050505050505050565b61147760003361129d565b6114935760405162461bcd60e51b81526004016105aa90613502565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6114bd61275f565b6000828152600660208181526040928390208351610160810185528154815260018083015460ff811683860152610100908190046001600160a01b0390811684890152600280860154909116606085015260038501546080850152600485015460a0850152600585015460c08501529584015460e08401526007840180548851938116158302600019011696909604601f810186900486028301860190975286825291959294918601939092908301828280156115bb5780601f10611590576101008083540402835291602001916115bb565b820191906000526020600020905b81548152906001019060200180831161159e57829003601f168201915b505050918352505060088201805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815293820193929183018282801561164f5780601f106116245761010080835404028352916020019161164f565b820191906000526020600020905b81548152906001019060200180831161163257829003601f168201915b505050918352505060098201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116e35780601f106116b8576101008083540402835291602001916116e3565b820191906000526020600020905b8154815290600101906020018083116116c657829003601f168201915b5050505050815250509050919050565b60008181526004602052604081206105d8906123c3565b6000808080808061171b818861129d565b90506000611737600080516020613f3a8339815191528961129d565b90506000611753600080516020613ed08339815191528a61129d565b9050600061176f600080516020613f5a8339815191528b61129d565b9050600061178b600080516020613ef08339815191528c61129d565b949b939a50919850965091945092505050565b6000828152600460205260409020600201546117bc9061043d611d19565b610d515760405162461bcd60e51b81526004016105aa9061359e565b6117e360003361129d565b6117ff5760405162461bcd60e51b81526004016105aa90613502565b6005805460ff1916911515919091179055565b61181d60003361129d565b6118395760405162461bcd60e51b81526004016105aa90613502565b61184281611ef2565b61185e5760405162461bcd60e51b81526004016105aa9061341d565b8060ff166001141561188757611882600080516020613f3a8339815191528361179e565b6118c3565b8060ff16600214156118ab57611882600080516020613ed08339815191528361179e565b6118c3600080516020613f5a8339815191528361179e565b6118cc82611053565b6118fa576118fa7ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf38361179e565b6040516001600160a01b038316907f98552ded770f1d05a505572f3387c108dbc6b566ea3d49f83cff3d1f1c72a04290600090a25050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b0384166119865760405162461bcd60e51b81526004016105aa90613642565b61198e611d19565b6001600160a01b0316856001600160a01b031614806119b457506119b48561054f611d19565b6119d05760405162461bcd60e51b81526004016105aa9061346f565b60006119da611d19565b90506119fa8187876119eb886123ce565b6119f4886123ce565b87611d1d565b611a41836040518060600160405280602a8152602001613f10602a913960008781526001602090815260408083206001600160a01b038d1684529091529020549190611d4f565b60008581526001602090815260408083206001600160a01b038b81168552925280832093909355871681522054611a789084611cf4565b60008581526001602090815260408083206001600160a01b03808b168086529190935292819020939093559151909188811691908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611ade9089908990613ced565b60405180910390a4610b9c818787878787612412565b600080516020613f3a83398151915281565b6000611b20600080516020613f3a8339815191523361129d565b90506000611b3c600080516020613ed08339815191523361129d565b90506000611b58600080516020613f5a8339815191523361129d565b90508280611b635750815b80611b6b5750805b611b875760405162461bcd60e51b81526004016105aa9061326b565b611b998c338d8d8d8d8d8d8d8d611fa6565b505050505050505050505050565b6000611296836001600160a01b0384166124e3565b600081611bc96009611f81565b10611bd6575060016105fc565b506000919050565b6001600160a01b038316611c045760405162461bcd60e51b81526004016105aa906136d9565b6000611c0e611d19565b9050611c3e81856000611c20876123ce565b611c29876123ce565b60405180602001604052806000815250611d1d565b611c8582604051806060016040528060248152602001613eac6024913960008681526001602090815260408083206001600160a01b038b1684529091529020549190611d4f565b60008481526001602090815260408083206001600160a01b03808a16808652919093528184209490945551919291908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611ce69088908890613ced565b60405180910390a450505050565b6000828201838110156112965760405162461bcd60e51b81526004016105aa906133e6565b3390565b60055460ff1615610b9c57611d3360008761129d565b610b9c5760405162461bcd60e51b81526004016105aa90613907565b60008184841115611d735760405162461bcd60e51b81526004016105aa919061312b565b505050900390565b611d8d846001600160a01b031661252d565b15610b9c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611dc69089908990889088908890600401612ff1565b602060405180830381600087803b158015611de057600080fd5b505af1925050508015611e10575060408051601f3d908101601f19168201909252611e0d91810190612e8d565b60015b611e5957611e1c613dd8565b80611e275750611e41565b8060405162461bcd60e51b81526004016105aa919061312b565b60405162461bcd60e51b81526004016105aa9061313e565b6001600160e01b0319811663bc197c8160e01b1461071d5760405162461bcd60e51b81526004016105aa906131d4565b6000828152600460205260409020611ea19082611ba7565b15610be857611eae611d19565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000808260ff16118015611f0b5750600a5460ff831611155b15611bd6575060016105fc565b6000828152600460205260409020611f309082612533565b15610be857611f3d611d19565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b5490565b60006112968383612548565b6000611296836001600160a01b03841661258d565b611faf88611ef2565b611fcb5760405162461bcd60e51b81526004016105aa90613b82565b60055460ff1615612035578760ff16600314612035576008546001600160a01b038a811691161461200e5760405162461bcd60e51b81526004016105aa906132b4565b61201960008b61129d565b6120355760405162461bcd60e51b81526004016105aa90613865565b8760ff166001141561207a57612059600080516020613f3a8339815191528a61129d565b6120755760405162461bcd60e51b81526004016105aa90613a4c565b6120ee565b8760ff16600214156120ba5761209e600080516020613ed08339815191528a61129d565b6120755760405162461bcd60e51b81526004016105aa9061354b565b6120d2600080516020613f5a8339815191528a61129d565b6120ee5760405162461bcd60e51b81526004016105aa90613808565b6120f860096125a5565b6000600660006121086009611f81565b815260200190815260200160002090506121226009611f81565b8160000181905550888160010160006101000a81548160ff021916908360ff1602179055508a8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550898160010160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550868160030181905550858160040181905550848160060181905550428160050181905550838160070190805190602001906121d59291906127ce565b5082516121eb90600883019060208601906127ce565b50815161220190600983019060208501906127ce565b506122268b6122106009611f81565b8a604051806020016040528060008152506125ae565b8860ff16600314156122aa576002810154815461224d916001600160a01b0316908a611bde565b8054600090815260076020908152604080832060028501546001600160a01b031684529091529020546122809089611cf4565b8154600090815260076020908152604080832060028601546001600160a01b031684529091529020555b8060020160009054906101000a90046001600160a01b03166001600160a01b03168160010160019054906101000a90046001600160a01b03166001600160a01b03167f99cc3eeb446560c9a2d2483bc5160735ec0fb1851aea3bde32e7a56c30c11da68a600760008660000154815260200190815260200160002060008660020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205485600001548660010160009054906101000a900460ff168760030154886004015489600601548a600501548b6007018c6008018d6009016040516123ae9b9a99989796959493929190613cfb565b60405180910390a35050505050505050505050565b60006105d882611f81565b60408051600180825281830190925260609182919060208083019080368337019050509050828160008151811061240157fe5b602090810291909101015292915050565b612424846001600160a01b031661252d565b15610b9c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061245d908990899088908890889060040161304f565b602060405180830381600087803b15801561247757600080fd5b505af19250505080156124a7575060408051601f3d908101601f191682019092526124a491810190612e8d565b60015b6124b357611e1c613dd8565b6001600160e01b0319811663f23a6e6160e01b1461071d5760405162461bcd60e51b81526004016105aa906131d4565b60006124ef838361258d565b612525575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d8565b5060006105d8565b3b151590565b6000611296836001600160a01b038416612699565b8154600090821061256b5760405162461bcd60e51b81526004016105aa90613192565b82600001828154811061257a57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b80546001019055565b6001600160a01b0384166125d45760405162461bcd60e51b81526004016105aa90613ae4565b60006125de611d19565b90506125f0816000876119eb886123ce565b60008481526001602090815260408083206001600160a01b038916845290915290205461261d9084611cf4565b60008581526001602090815260408083206001600160a01b03808b16808652919093528184209490945551908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061267b9089908990613ced565b60405180910390a461269281600087878787612412565b5050505050565b6000818152600183016020526040812054801561275557835460001980830191908101906000908790839081106126cc57fe5b90600052602060002001549050808760000184815481106126e957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061271957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105d8565b60009150506105d8565b60405180610160016040528060008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061280f57805160ff191683800117855561283c565b8280016001018555821561283c579182015b8281111561283c578251825591602001919060010190612821565b5061284892915061284c565b5090565b5b80821115612848576000815560010161284d565b80356001600160a01b03811681146105d857600080fd5b600082601f830112612888578081fd5b813561289b61289682613da6565b613d7f565b8181529150602080830190848101818402860182018710156128bc57600080fd5b60005b848110156128db578135845292820192908201906001016128bf565b505050505092915050565b600082601f8301126128f6578081fd5b813567ffffffffffffffff81111561290c578182fd5b61291f601f8201601f1916602001613d7f565b915080825283602082850101111561293657600080fd5b8060208401602084013760009082016020015292915050565b803560ff811681146105d857600080fd5b600060208284031215612971578081fd5b6112968383612861565b6000806040838503121561298d578081fd5b6129978484612861565b91506129a68460208501612861565b90509250929050565b600080600080600060a086880312156129c6578081fd5b85356129d181613e7d565b945060208601356129e181613e7d565b9350604086013567ffffffffffffffff808211156129fd578283fd5b612a0989838a01612878565b94506060880135915080821115612a1e578283fd5b612a2a89838a01612878565b93506080880135915080821115612a3f578283fd5b50612a4c888289016128e6565b9150509295509295909350565b600080600080600060a08688031215612a70578081fd5b612a7a8787612861565b9450612a898760208801612861565b93506040860135925060608601359150608086013567ffffffffffffffff811115612ab2578182fd5b612a4c888289016128e6565b6000806000806000806000806000806101408b8d031215612add578485fd5b612ae78c8c612861565b9950612af68c60208d01612861565b9850612b058c60408d0161294f565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013567ffffffffffffffff80821115612b3d578485fd5b612b498e838f016128e6565b94506101008d0135915080821115612b5f578384fd5b612b6b8e838f016128e6565b93506101208d0135915080821115612b81578283fd5b50612b8e8d828e016128e6565b9150509295989b9194979a5092959850565b60008060408385031215612bb2578182fd5b612bbc8484612861565b915060208301358015158114612bd0578182fd5b809150509250929050565b60008060408385031215612bed578182fd5b612bf78484612861565b946020939093013593505050565b600080600060608486031215612c19578081fd5b612c238585612861565b95602085013595506040909401359392505050565b60008060408385031215612c4a578182fd5b612c548484612861565b91506129a6846020850161294f565b60008060008060008060008060006101208a8c031215612c81578283fd5b612c8b8b8b612861565b9850612c9a8b60208c0161294f565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013567ffffffffffffffff80821115612cd2578485fd5b612cde8d838e016128e6565b945060e08c0135915080821115612cf3578384fd5b612cff8d838e016128e6565b93506101008c0135915080821115612d15578283fd5b50612d228c828d016128e6565b9150509295985092959850929598565b60008060408385031215612d44578182fd5b823567ffffffffffffffff80821115612d5b578384fd5b818501915085601f830112612d6e578384fd5b8135612d7c61289682613da6565b80828252602080830192508086018a828387028901011115612d9c578889fd5b8896505b84871015612dc657612db28b82612861565b845260019690960195928101928101612da0565b509096508701359350505080821115612ddd578283fd5b50612dea85828601612878565b9150509250929050565b600060208284031215612e05578081fd5b81358015158114611296578182fd5b600060208284031215612e25578081fd5b5035919050565b60008060408385031215612e3e578182fd5b823591506020830135612bd081613e7d565b60008060408385031215612e62578182fd5b50508035926020909101359150565b600060208284031215612e82578081fd5b813561129681613e95565b600060208284031215612e9e578081fd5b815161129681613e95565b600060208284031215612eba578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612efd57815187529582019590820190600101612ee1565b509495945050505050565b60008151808452815b81811015612f2d57602081850181015186830182015201612f11565b81811115612f3e5782602083870101525b50601f01601f19169290920160200192915050565b60008154600180821660008114612f715760018114612f8f57612fcd565b60028304607f16865260ff1983166020870152604086019350612fcd565b60028304808752612f9f86613dc6565b60005b82811015612fc35781546020828b0101528482019150602081019050612fa2565b8801602001955050505b50505092915050565b60ff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a06040820181905260009061301d90830186612ece565b828103606084015261302f8186612ece565b905082810360808401526130438185612f08565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061308990830184612f08565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526112966020830184612ece565b6000604082526130d36040830185612ece565b82810360208401526130e58185612ece565b95945050505050565b901515815260200190565b941515855292151560208501529015156040840152151560608301521515608082015260a00190565b90815260200190565b6000602082526112966020830184612f08565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c794465616c65723a206d73672e73656e646572206e6f746040820152681030903232b0b632b960b91b606082015260800190565b60208082526032908201527f434c4d383a3a5f69737375653a206c696d69746564206d6f6465206f6e3a20696040820152717373756572206e6f742074696d656c6f636b60701b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526031908201527f455243313135353a2062617463682062616c616e636520717565727920666f7260408201527020746865207a65726f206164647265737360781b606082015260800190565b60208082526024908201527f434c4d383a3a7265746972653a20746f6b656e496420646f6573206e6f7420656040820152631e1a5cdd60e21b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526032908201527f434c4d383a3a756e72656769737465724465616c65723a20746f6b656e54797060408201527119525908191bd95cc81b9bdd08195e1a5cdd60721b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602a908201527f434c4d383a3a676574546f6b656e547970653a20746f6b656e496420646f6573604082015269081b9bdd08195e1a5cdd60b21b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206e6f74206040820152683a34329030b236b4b760b91b606082015260800190565b60208082526033908201527f434c4d383a3a5f69737375653a20697373756572206e6f7420612072656769736040820152723a32b932b21037b33339b2ba103232b0b632b960691b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526034908201527f434c4d383a3a7265746972653a206e6f7420656e6f75676820617661696c61626040820152736c652062616c616e636520746f2072657469726560601b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526036908201527f434c4d383a3a7472616e736665723a2073656e64657220616e642072656365696040820152757665722063616e6e6f74206265207468652073616d6560501b606082015260800190565b60208082526030908201527f434c4d383a3a72656769737465724465616c65723a20746f6b656e547970654960408201526f1908191bd95cc81b9bdd08195e1a5cdd60821b606082015260800190565b60208082526026908201527f434c4d383a3a7472616e736665723a20746f6b656e496420646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b60208082526037908201527f434c4d383a3a5f69737375653a20697373756572206e6f74206120726567697360408201527f746572656420656d697373696f6e732061756469746f72000000000000000000606082015260800190565b6020808252602f908201527f434c4d383a3a5f69737375653a206c696d69746564206d6f6465206f6e3a206960408201526e39b9bab2b2903737ba1030b236b4b760891b606082015260800190565b60208082526033908201527f434c4d383a3a676574546f6b656e52657469726564416d6f756e743a20746f6b604082015272195b925908191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b6020808252604b908201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a206c696d6960408201527f746564206d6f6465206f6e3a206f6e6c792061646d696e2063616e207472616e60608201526a7366657220746f6b656e7360a81b608082015260a00190565b60208082526022908201527f434c4d383a3a6f6e6c7944414f3a20596f7520617265206e6f74207468652044604082015261414f60f01b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526030908201527f434c4d383a3a5f69737375653a20697373756572206e6f74206120726567697360408201526f3a32b932b2102922a1903232b0b632b960811b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252603d908201527f434c4d383a3a636f6e73756d65724f724465616c65723a206d73672e73656e6460408201527f6572206e6f74206120636f6e73756d6572206f722061206465616c6572000000606082015260800190565b60208082526024908201527f434c4d383a3a5f69737375653a20746f6b656e54797065496420697320696e76604082015263185b1a5960e21b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600060208252825160208301526020830151613c346040840182612fd6565b506040830151613c476060840182612ec1565b506060830151613c5a6080840182612ec1565b50608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101606101208181860152613ca6610180860184612f08565b9250808601519050601f19610140818786030181880152613cc78584612f08565b908801518782039092018488015293509050613ce38382612f08565b9695505050505050565b918252602082015260400190565b60006101608d83528c60208401528b604084015260ff8b1660608401528960808401528860a08401528760c08401528660e084015280610100840152613d4381840187612f53565b9050828103610120840152613d588186612f53565b9050828103610140840152613d6d8185612f53565b9e9d5050505050505050505050505050565b60405181810167ffffffffffffffff81118282101715613d9e57600080fd5b604052919050565b600067ffffffffffffffff821115613dbc578081fd5b5060209081020190565b60009081526020902090565b60e01c90565b600060443d1015613de857611050565b600481823e6308c379a0613dfc8251613dd2565b14613e0657611050565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715613e365750505050611050565b82840192508251915080821115613e505750505050611050565b503d83016020828401011115613e6857505050611050565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114613e9257600080fd5b50565b6001600160e01b031981168114613e9257600080fdfe455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365ede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5f5e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76a455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e736665722ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860e97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12ca264697066735822122029622da938f47c613ab3e9c7c87826b426800c70d28c6631aac66d5bcfbf785664736f6c63430007000033f8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf3",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c806378e5c59211610146578063bdacb303116100c3578063ddc3e6eb11610087578063ddc3e6eb1461051b578063e2e564f21461052e578063e985e9c514610541578063f242432a14610554578063fcba794814610567578063fd0c4a9a1461056f57610252565b8063bdacb3031461049e578063c1e03728146104b1578063ca15c873146104d1578063ce6ccfaf146104e4578063d547741f1461050857610252565b80639cb8a26a1161010a5780639cb8a26a14610455578063a0d975a71461045d578063a217fddf14610470578063a22cb46514610478578063a53b5dd91461048b57610252565b806378e5c592146103e65780637f157c9b146103ee5780639010d07c1461040f57806391d148541461042f57806392089c461461044257610252565b806331aa4b20116101d457806353dbe9821161019857806353dbe9821461039d5780635ddb368f146103b057806369f7ef44146103b857806376aed2e1146103cb57806376ce4755146103de57610252565b806331aa4b201461033157806333781a0e1461034457806336568abe1461035757806344b22fdd1461036a5780634e1273f41461037d57610252565b80631ef68ef71161021b5780631ef68ef7146102dd578063248a9ca3146102e5578063293a7f2e146102f85780632eb2c2d61461030b5780632f2ff15d1461031e57610252565b8062fdd58e1461025757806301ffc9a714610280578063095bcdb6146102a05780630e89341c146102b557806318a50d7e146102d5575b600080fd5b61026a610265366004612bdb565b610582565b6040516102779190613122565b60405180910390f35b61029361028e366004612e71565b6105de565b60405161027791906130ee565b6102b36102ae366004612c05565b610601565b005b6102c86102c3366004612e14565b610726565b604051610277919061312b565b61026a6107be565b61026a6107e2565b61026a6102f3366004612e14565b6107f4565b6102b3610306366004612e50565b610809565b6102b36103193660046129af565b61098a565b6102b361032c366004612e2c565b610ba4565b6102b361033f366004612c38565b610bec565b610293610352366004612960565b610cff565b6102b3610365366004612e2c565b610d19565b6102b3610378366004612960565b610d5b565b61039061038b366004612d32565b610e2e565b60405161027791906130ad565b6102b36103ab366004612960565b610f6e565b61026a611041565b6102936103c6366004612960565b611053565b6102c86103d9366004612e14565b6110d5565b61026a6111c3565b61026a6111d5565b6104016103fc366004612bdb565b6111e7565b604051610277929190613ced565b61042261041d366004612e50565b61127e565b6040516102779190612fdd565b61029361043d366004612e2c565b61129d565b610422610450366004612e14565b6112b5565b6102b36112d8565b61026a61046b366004612bdb565b611302565b61026a611351565b6102b3610486366004612ba0565b611356565b6102b3610499366004612abe565b611424565b6102b36104ac366004612960565b61146c565b6104c46104bf366004612e14565b6114b5565b6040516102779190613c15565b61026a6104df366004612e14565b6116f3565b6104f76104f2366004612960565b61170a565b6040516102779594939291906130f9565b6102b3610516366004612e2c565b61179e565b6102b3610529366004612df4565b6117d8565b6102b361053c366004612c38565b611812565b61029361054f36600461297b565b611932565b6102b3610562366004612a59565b611960565b61026a611af4565b6102b361057d366004612c63565b611b06565b60006001600160a01b0383166105b35760405162461bcd60e51b81526004016105aa90613306565b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b600061061b600080516020613ef08339815191523361129d565b90506000610637600080516020613f3a8339815191523361129d565b90506000610653600080516020613ed08339815191523361129d565b9050600061066f600080516020613f5a8339815191523361129d565b9050838061067a5750825b806106825750815b8061068a5750805b6106a65760405162461bcd60e51b81526004016105aa90613b25565b6106af86611bbc565b6106cb5760405162461bcd60e51b81526004016105aa906137c2565b336001600160a01b03881614156106f45760405162461bcd60e51b81526004016105aa9061371c565b61071d33888888604051806040016040528060048152602001630307830360e41b815250611960565b50505050505050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b50505050509050919050565b7ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf381565b600080516020613ed083398151915281565b60009081526004602052604090206002015490565b6000610823600080516020613ef08339815191523361129d565b9050600061083f600080516020613f3a8339815191523361129d565b9050600061085b600080516020613ed08339815191523361129d565b90506000610877600080516020613f5a8339815191523361129d565b905083806108825750825b8061088a5750815b806108925750805b6108ae5760405162461bcd60e51b81526004016105aa90613b25565b6108b786611bbc565b6108d35760405162461bcd60e51b81526004016105aa906133a2565b6108dd3387610582565b8511156108fc5760405162461bcd60e51b81526004016105aa906135ee565b610907338787611bde565b600086815260076020908152604080832033845290915290205461092b9086611cf4565b60008781526007602090815260408083203380855292529182902092909255517f8f1b5ebb586d3d169e4ed07db9cd10ce0dd30c7b656171310eae7517c0b53cf99061097a9089908990613ced565b60405180910390a2505050505050565b81518351146109ab5760405162461bcd60e51b81526004016105aa90613a9c565b6001600160a01b0384166109d15760405162461bcd60e51b81526004016105aa90613642565b6109d9611d19565b6001600160a01b0316856001600160a01b031614806109ff57506109ff8561054f611d19565b610a1b5760405162461bcd60e51b81526004016105aa90613687565b6000610a25611d19565b9050610a35818787878787611d1d565b60005b8451811015610b36576000858281518110610a4f57fe5b602002602001015190506000858381518110610a6757fe5b60200260200101519050610ad4816040518060600160405280602a8152602001613f10602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611d4f9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610b0b9082611cf4565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610a38565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610b869291906130c0565b60405180910390a4610b9c818787878787611d7b565b505050505050565b600082815260046020526040902060020154610bc29061043d611d19565b610bde5760405162461bcd60e51b81526004016105aa9061321c565b610be88282611e89565b5050565b610bf760003361129d565b610c135760405162461bcd60e51b81526004016105aa90613502565b610c1c81611ef2565b610c385760405162461bcd60e51b81526004016105aa90613772565b8060ff1660011415610c6157610c5c600080516020613f3a83398151915283610ba4565b610c9d565b8060ff1660021415610c8557610c5c600080516020613ed083398151915283610ba4565b610c9d600080516020613f5a83398151915283610ba4565b610cc77ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf383610ba4565b6040516001600160a01b038316907fa8377deee15954185683d55effd369508b4935978c8cb2bab790bf04c570181490600090a25050565b60006105d8600080516020613ef08339815191528361129d565b610d21611d19565b6001600160a01b0316816001600160a01b031614610d515760405162461bcd60e51b81526004016105aa90613bc6565b610be88282611f18565b6000610d75600080516020613f3a8339815191523361129d565b90506000610d91600080516020613ed08339815191523361129d565b90506000610dad600080516020613f5a8339815191523361129d565b90508280610db85750815b80610dc05750805b610ddc5760405162461bcd60e51b81526004016105aa9061326b565b610df4600080516020613ef083398151915285610ba4565b6040516001600160a01b038516907f69a0adee259d26fe61f4776f7bea7f3a9737c7321256821b985f988545efd31990600090a250505050565b60608151835114610e515760405162461bcd60e51b81526004016105aa90613a03565b6060835167ffffffffffffffff81118015610e6b57600080fd5b50604051908082528060200260200182016040528015610e95578160200160208202803683370190505b50905060005b8451811015610f665760006001600160a01b0316858281518110610ebb57fe5b60200260200101516001600160a01b03161415610eea5760405162461bcd60e51b81526004016105aa90613351565b60016000858381518110610efa57fe5b602002602001015181526020019081526020016000206000868381518110610f1e57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610f5357fe5b6020908102919091010152600101610e9b565b509392505050565b6000610f88600080516020613f3a8339815191523361129d565b90506000610fa4600080516020613ed08339815191523361129d565b90506000610fc0600080516020613f5a8339815191523361129d565b90508280610fcb5750815b80610fd35750805b610fef5760405162461bcd60e51b81526004016105aa9061326b565b611007600080516020613ef08339815191528561179e565b6040516001600160a01b038516907f03a38088da75ee2d80f6c753f55f8fd17602ae17d8bd0ef44d5e1f28ab5af11f90600090a250505050565b600061104d6009611f81565b90505b90565b60008061106e600080516020613f3a8339815191528461129d565b9050600061108a600080516020613ed08339815191528561129d565b905060006110a6600080516020613f5a8339815191528661129d565b905082806110b15750815b806110b95750805b156110ca57600193505050506105fc565b506000949350505050565b60606110e082611bbc565b6110fc5760405162461bcd60e51b81526004016105aa906134b8565b600082815260066020526040902060010154600a805460609260001960ff918216011690811061112857fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156111b65780601f1061118b576101008083540402835291602001916111b6565b820191906000526020600020905b81548152906001019060200180831161119957829003601f168201915b5093979650505050505050565b600080516020613f5a83398151915281565b600080516020613ef083398151915281565b60008060006111f68585610582565b60405163a0d975a760e01b8152909150600090309063a0d975a7906112219089908990600401613094565b60206040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190612ea9565b9196919550909350505050565b60008281526004602052604081206112969083611f85565b9392505050565b60008281526004602052604081206112969083611f91565b60009081526006602052604090206001015461010090046001600160a01b031690565b6112e360003361129d565b6112ff5760405162461bcd60e51b81526004016105aa90613502565b30ff5b600061130d82611bbc565b6113295760405162461bcd60e51b81526004016105aa906138b4565b5060009081526007602090815260408083206001600160a01b03949094168352929052205490565b600081565b816001600160a01b0316611368611d19565b6001600160a01b0316141561138f5760405162461bcd60e51b81526004016105aa906139ba565b806002600061139c611d19565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113e0611d19565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161141891906130ee565b60405180910390a35050565b6008546001600160a01b0316331461144e5760405162461bcd60e51b81526004016105aa90613978565b6114608a8a8a8a8a8a8a8a8a8a611fa6565b50505050505050505050565b61147760003361129d565b6114935760405162461bcd60e51b81526004016105aa90613502565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6114bd61275f565b6000828152600660208181526040928390208351610160810185528154815260018083015460ff811683860152610100908190046001600160a01b0390811684890152600280860154909116606085015260038501546080850152600485015460a0850152600585015460c08501529584015460e08401526007840180548851938116158302600019011696909604601f810186900486028301860190975286825291959294918601939092908301828280156115bb5780601f10611590576101008083540402835291602001916115bb565b820191906000526020600020905b81548152906001019060200180831161159e57829003601f168201915b505050918352505060088201805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815293820193929183018282801561164f5780601f106116245761010080835404028352916020019161164f565b820191906000526020600020905b81548152906001019060200180831161163257829003601f168201915b505050918352505060098201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116e35780601f106116b8576101008083540402835291602001916116e3565b820191906000526020600020905b8154815290600101906020018083116116c657829003601f168201915b5050505050815250509050919050565b60008181526004602052604081206105d8906123c3565b6000808080808061171b818861129d565b90506000611737600080516020613f3a8339815191528961129d565b90506000611753600080516020613ed08339815191528a61129d565b9050600061176f600080516020613f5a8339815191528b61129d565b9050600061178b600080516020613ef08339815191528c61129d565b949b939a50919850965091945092505050565b6000828152600460205260409020600201546117bc9061043d611d19565b610d515760405162461bcd60e51b81526004016105aa9061359e565b6117e360003361129d565b6117ff5760405162461bcd60e51b81526004016105aa90613502565b6005805460ff1916911515919091179055565b61181d60003361129d565b6118395760405162461bcd60e51b81526004016105aa90613502565b61184281611ef2565b61185e5760405162461bcd60e51b81526004016105aa9061341d565b8060ff166001141561188757611882600080516020613f3a8339815191528361179e565b6118c3565b8060ff16600214156118ab57611882600080516020613ed08339815191528361179e565b6118c3600080516020613f5a8339815191528361179e565b6118cc82611053565b6118fa576118fa7ff8890eedd7900ad88da6192fd03dbb69dbeee963b1a0ed738abe49ab3331aaf38361179e565b6040516001600160a01b038316907f98552ded770f1d05a505572f3387c108dbc6b566ea3d49f83cff3d1f1c72a04290600090a25050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b0384166119865760405162461bcd60e51b81526004016105aa90613642565b61198e611d19565b6001600160a01b0316856001600160a01b031614806119b457506119b48561054f611d19565b6119d05760405162461bcd60e51b81526004016105aa9061346f565b60006119da611d19565b90506119fa8187876119eb886123ce565b6119f4886123ce565b87611d1d565b611a41836040518060600160405280602a8152602001613f10602a913960008781526001602090815260408083206001600160a01b038d1684529091529020549190611d4f565b60008581526001602090815260408083206001600160a01b038b81168552925280832093909355871681522054611a789084611cf4565b60008581526001602090815260408083206001600160a01b03808b168086529190935292819020939093559151909188811691908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611ade9089908990613ced565b60405180910390a4610b9c818787878787612412565b600080516020613f3a83398151915281565b6000611b20600080516020613f3a8339815191523361129d565b90506000611b3c600080516020613ed08339815191523361129d565b90506000611b58600080516020613f5a8339815191523361129d565b90508280611b635750815b80611b6b5750805b611b875760405162461bcd60e51b81526004016105aa9061326b565b611b998c338d8d8d8d8d8d8d8d611fa6565b505050505050505050505050565b6000611296836001600160a01b0384166124e3565b600081611bc96009611f81565b10611bd6575060016105fc565b506000919050565b6001600160a01b038316611c045760405162461bcd60e51b81526004016105aa906136d9565b6000611c0e611d19565b9050611c3e81856000611c20876123ce565b611c29876123ce565b60405180602001604052806000815250611d1d565b611c8582604051806060016040528060248152602001613eac6024913960008681526001602090815260408083206001600160a01b038b1684529091529020549190611d4f565b60008481526001602090815260408083206001600160a01b03808a16808652919093528184209490945551919291908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611ce69088908890613ced565b60405180910390a450505050565b6000828201838110156112965760405162461bcd60e51b81526004016105aa906133e6565b3390565b60055460ff1615610b9c57611d3360008761129d565b610b9c5760405162461bcd60e51b81526004016105aa90613907565b60008184841115611d735760405162461bcd60e51b81526004016105aa919061312b565b505050900390565b611d8d846001600160a01b031661252d565b15610b9c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611dc69089908990889088908890600401612ff1565b602060405180830381600087803b158015611de057600080fd5b505af1925050508015611e10575060408051601f3d908101601f19168201909252611e0d91810190612e8d565b60015b611e5957611e1c613dd8565b80611e275750611e41565b8060405162461bcd60e51b81526004016105aa919061312b565b60405162461bcd60e51b81526004016105aa9061313e565b6001600160e01b0319811663bc197c8160e01b1461071d5760405162461bcd60e51b81526004016105aa906131d4565b6000828152600460205260409020611ea19082611ba7565b15610be857611eae611d19565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000808260ff16118015611f0b5750600a5460ff831611155b15611bd6575060016105fc565b6000828152600460205260409020611f309082612533565b15610be857611f3d611d19565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b5490565b60006112968383612548565b6000611296836001600160a01b03841661258d565b611faf88611ef2565b611fcb5760405162461bcd60e51b81526004016105aa90613b82565b60055460ff1615612035578760ff16600314612035576008546001600160a01b038a811691161461200e5760405162461bcd60e51b81526004016105aa906132b4565b61201960008b61129d565b6120355760405162461bcd60e51b81526004016105aa90613865565b8760ff166001141561207a57612059600080516020613f3a8339815191528a61129d565b6120755760405162461bcd60e51b81526004016105aa90613a4c565b6120ee565b8760ff16600214156120ba5761209e600080516020613ed08339815191528a61129d565b6120755760405162461bcd60e51b81526004016105aa9061354b565b6120d2600080516020613f5a8339815191528a61129d565b6120ee5760405162461bcd60e51b81526004016105aa90613808565b6120f860096125a5565b6000600660006121086009611f81565b815260200190815260200160002090506121226009611f81565b8160000181905550888160010160006101000a81548160ff021916908360ff1602179055508a8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550898160010160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550868160030181905550858160040181905550848160060181905550428160050181905550838160070190805190602001906121d59291906127ce565b5082516121eb90600883019060208601906127ce565b50815161220190600983019060208501906127ce565b506122268b6122106009611f81565b8a604051806020016040528060008152506125ae565b8860ff16600314156122aa576002810154815461224d916001600160a01b0316908a611bde565b8054600090815260076020908152604080832060028501546001600160a01b031684529091529020546122809089611cf4565b8154600090815260076020908152604080832060028601546001600160a01b031684529091529020555b8060020160009054906101000a90046001600160a01b03166001600160a01b03168160010160019054906101000a90046001600160a01b03166001600160a01b03167f99cc3eeb446560c9a2d2483bc5160735ec0fb1851aea3bde32e7a56c30c11da68a600760008660000154815260200190815260200160002060008660020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205485600001548660010160009054906101000a900460ff168760030154886004015489600601548a600501548b6007018c6008018d6009016040516123ae9b9a99989796959493929190613cfb565b60405180910390a35050505050505050505050565b60006105d882611f81565b60408051600180825281830190925260609182919060208083019080368337019050509050828160008151811061240157fe5b602090810291909101015292915050565b612424846001600160a01b031661252d565b15610b9c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061245d908990899088908890889060040161304f565b602060405180830381600087803b15801561247757600080fd5b505af19250505080156124a7575060408051601f3d908101601f191682019092526124a491810190612e8d565b60015b6124b357611e1c613dd8565b6001600160e01b0319811663f23a6e6160e01b1461071d5760405162461bcd60e51b81526004016105aa906131d4565b60006124ef838361258d565b612525575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d8565b5060006105d8565b3b151590565b6000611296836001600160a01b038416612699565b8154600090821061256b5760405162461bcd60e51b81526004016105aa90613192565b82600001828154811061257a57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b80546001019055565b6001600160a01b0384166125d45760405162461bcd60e51b81526004016105aa90613ae4565b60006125de611d19565b90506125f0816000876119eb886123ce565b60008481526001602090815260408083206001600160a01b038916845290915290205461261d9084611cf4565b60008581526001602090815260408083206001600160a01b03808b16808652919093528184209490945551908416907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061267b9089908990613ced565b60405180910390a461269281600087878787612412565b5050505050565b6000818152600183016020526040812054801561275557835460001980830191908101906000908790839081106126cc57fe5b90600052602060002001549050808760000184815481106126e957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061271957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105d8565b60009150506105d8565b60405180610160016040528060008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061280f57805160ff191683800117855561283c565b8280016001018555821561283c579182015b8281111561283c578251825591602001919060010190612821565b5061284892915061284c565b5090565b5b80821115612848576000815560010161284d565b80356001600160a01b03811681146105d857600080fd5b600082601f830112612888578081fd5b813561289b61289682613da6565b613d7f565b8181529150602080830190848101818402860182018710156128bc57600080fd5b60005b848110156128db578135845292820192908201906001016128bf565b505050505092915050565b600082601f8301126128f6578081fd5b813567ffffffffffffffff81111561290c578182fd5b61291f601f8201601f1916602001613d7f565b915080825283602082850101111561293657600080fd5b8060208401602084013760009082016020015292915050565b803560ff811681146105d857600080fd5b600060208284031215612971578081fd5b6112968383612861565b6000806040838503121561298d578081fd5b6129978484612861565b91506129a68460208501612861565b90509250929050565b600080600080600060a086880312156129c6578081fd5b85356129d181613e7d565b945060208601356129e181613e7d565b9350604086013567ffffffffffffffff808211156129fd578283fd5b612a0989838a01612878565b94506060880135915080821115612a1e578283fd5b612a2a89838a01612878565b93506080880135915080821115612a3f578283fd5b50612a4c888289016128e6565b9150509295509295909350565b600080600080600060a08688031215612a70578081fd5b612a7a8787612861565b9450612a898760208801612861565b93506040860135925060608601359150608086013567ffffffffffffffff811115612ab2578182fd5b612a4c888289016128e6565b6000806000806000806000806000806101408b8d031215612add578485fd5b612ae78c8c612861565b9950612af68c60208d01612861565b9850612b058c60408d0161294f565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013567ffffffffffffffff80821115612b3d578485fd5b612b498e838f016128e6565b94506101008d0135915080821115612b5f578384fd5b612b6b8e838f016128e6565b93506101208d0135915080821115612b81578283fd5b50612b8e8d828e016128e6565b9150509295989b9194979a5092959850565b60008060408385031215612bb2578182fd5b612bbc8484612861565b915060208301358015158114612bd0578182fd5b809150509250929050565b60008060408385031215612bed578182fd5b612bf78484612861565b946020939093013593505050565b600080600060608486031215612c19578081fd5b612c238585612861565b95602085013595506040909401359392505050565b60008060408385031215612c4a578182fd5b612c548484612861565b91506129a6846020850161294f565b60008060008060008060008060006101208a8c031215612c81578283fd5b612c8b8b8b612861565b9850612c9a8b60208c0161294f565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013567ffffffffffffffff80821115612cd2578485fd5b612cde8d838e016128e6565b945060e08c0135915080821115612cf3578384fd5b612cff8d838e016128e6565b93506101008c0135915080821115612d15578283fd5b50612d228c828d016128e6565b9150509295985092959850929598565b60008060408385031215612d44578182fd5b823567ffffffffffffffff80821115612d5b578384fd5b818501915085601f830112612d6e578384fd5b8135612d7c61289682613da6565b80828252602080830192508086018a828387028901011115612d9c578889fd5b8896505b84871015612dc657612db28b82612861565b845260019690960195928101928101612da0565b509096508701359350505080821115612ddd578283fd5b50612dea85828601612878565b9150509250929050565b600060208284031215612e05578081fd5b81358015158114611296578182fd5b600060208284031215612e25578081fd5b5035919050565b60008060408385031215612e3e578182fd5b823591506020830135612bd081613e7d565b60008060408385031215612e62578182fd5b50508035926020909101359150565b600060208284031215612e82578081fd5b813561129681613e95565b600060208284031215612e9e578081fd5b815161129681613e95565b600060208284031215612eba578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612efd57815187529582019590820190600101612ee1565b509495945050505050565b60008151808452815b81811015612f2d57602081850181015186830182015201612f11565b81811115612f3e5782602083870101525b50601f01601f19169290920160200192915050565b60008154600180821660008114612f715760018114612f8f57612fcd565b60028304607f16865260ff1983166020870152604086019350612fcd565b60028304808752612f9f86613dc6565b60005b82811015612fc35781546020828b0101528482019150602081019050612fa2565b8801602001955050505b50505092915050565b60ff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a06040820181905260009061301d90830186612ece565b828103606084015261302f8186612ece565b905082810360808401526130438185612f08565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061308990830184612f08565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526112966020830184612ece565b6000604082526130d36040830185612ece565b82810360208401526130e58185612ece565b95945050505050565b901515815260200190565b941515855292151560208501529015156040840152151560608301521515608082015260a00190565b90815260200190565b6000602082526112966020830184612f08565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c794465616c65723a206d73672e73656e646572206e6f746040820152681030903232b0b632b960b91b606082015260800190565b60208082526032908201527f434c4d383a3a5f69737375653a206c696d69746564206d6f6465206f6e3a20696040820152717373756572206e6f742074696d656c6f636b60701b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526031908201527f455243313135353a2062617463682062616c616e636520717565727920666f7260408201527020746865207a65726f206164647265737360781b606082015260800190565b60208082526024908201527f434c4d383a3a7265746972653a20746f6b656e496420646f6573206e6f7420656040820152631e1a5cdd60e21b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526032908201527f434c4d383a3a756e72656769737465724465616c65723a20746f6b656e54797060408201527119525908191bd95cc81b9bdd08195e1a5cdd60721b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602a908201527f434c4d383a3a676574546f6b656e547970653a20746f6b656e496420646f6573604082015269081b9bdd08195e1a5cdd60b21b606082015260800190565b60208082526029908201527f434c4d383a3a6f6e6c7941646d696e3a206d73672e73656e646572206e6f74206040820152683a34329030b236b4b760b91b606082015260800190565b60208082526033908201527f434c4d383a3a5f69737375653a20697373756572206e6f7420612072656769736040820152723a32b932b21037b33339b2ba103232b0b632b960691b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526034908201527f434c4d383a3a7265746972653a206e6f7420656e6f75676820617661696c61626040820152736c652062616c616e636520746f2072657469726560601b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526036908201527f434c4d383a3a7472616e736665723a2073656e64657220616e642072656365696040820152757665722063616e6e6f74206265207468652073616d6560501b606082015260800190565b60208082526030908201527f434c4d383a3a72656769737465724465616c65723a20746f6b656e547970654960408201526f1908191bd95cc81b9bdd08195e1a5cdd60821b606082015260800190565b60208082526026908201527f434c4d383a3a7472616e736665723a20746f6b656e496420646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b60208082526037908201527f434c4d383a3a5f69737375653a20697373756572206e6f74206120726567697360408201527f746572656420656d697373696f6e732061756469746f72000000000000000000606082015260800190565b6020808252602f908201527f434c4d383a3a5f69737375653a206c696d69746564206d6f6465206f6e3a206960408201526e39b9bab2b2903737ba1030b236b4b760891b606082015260800190565b60208082526033908201527f434c4d383a3a676574546f6b656e52657469726564416d6f756e743a20746f6b604082015272195b925908191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b6020808252604b908201527f434c4d383a3a5f6265666f7265546f6b656e5472616e736665723a206c696d6960408201527f746564206d6f6465206f6e3a206f6e6c792061646d696e2063616e207472616e60608201526a7366657220746f6b656e7360a81b608082015260a00190565b60208082526022908201527f434c4d383a3a6f6e6c7944414f3a20596f7520617265206e6f74207468652044604082015261414f60f01b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526030908201527f434c4d383a3a5f69737375653a20697373756572206e6f74206120726567697360408201526f3a32b932b2102922a1903232b0b632b960811b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252603d908201527f434c4d383a3a636f6e73756d65724f724465616c65723a206d73672e73656e6460408201527f6572206e6f74206120636f6e73756d6572206f722061206465616c6572000000606082015260800190565b60208082526024908201527f434c4d383a3a5f69737375653a20746f6b656e54797065496420697320696e76604082015263185b1a5960e21b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600060208252825160208301526020830151613c346040840182612fd6565b506040830151613c476060840182612ec1565b506060830151613c5a6080840182612ec1565b50608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101606101208181860152613ca6610180860184612f08565b9250808601519050601f19610140818786030181880152613cc78584612f08565b908801518782039092018488015293509050613ce38382612f08565b9695505050505050565b918252602082015260400190565b60006101608d83528c60208401528b604084015260ff8b1660608401528960808401528860a08401528760c08401528660e084015280610100840152613d4381840187612f53565b9050828103610120840152613d588186612f53565b9050828103610140840152613d6d8185612f53565b9e9d5050505050505050505050505050565b60405181810167ffffffffffffffff81118282101715613d9e57600080fd5b604052919050565b600067ffffffffffffffff821115613dbc578081fd5b5060209081020190565b60009081526020902090565b60e01c90565b600060443d1015613de857611050565b600481823e6308c379a0613dfc8251613dd2565b14613e0657611050565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715613e365750505050611050565b82840192508251915080821115613e505750505050611050565b503d83016020828401011115613e6857505050611050565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114613e9257600080fd5b50565b6001600160e01b031981168114613e9257600080fdfe455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365ede6574deba8f02ada7888448a497b08844d62e044ed533343a673be3ffcde5f5e1aa547d3dade8c68b013a47ad41c2bcc9b9e4b0765b0fb616780e15786e76a455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e736665722ab9f1da92e74aaa01eb75a871557505b11dd8d36832a34bb21bbee88b08d860e97dad3dbe5042e7384b1572cf966a15e089576a62b5126c5ef1d184ab18b12ca264697066735822122029622da938f47c613ab3e9c7c87826b426800c70d28c6631aac66d5bcfbf785664736f6c63430007000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getIssuer(uint256)": {
        "details": "returns issuer of a given tokenId"
      },
      "getNumOfUniqueTokens()": {
        "details": "returns number of unique tokens"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoles(address)": {
        "details": "Helper function for returning tuple of bools of role membership",
        "params": {
          "account": "address to check roles"
        }
      },
      "getTokenDetails(uint256)": {
        "details": "returns the entire details of a given tokenId",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenRetiredAmount(address,uint256)": {
        "details": "returns the retired amount on a token",
        "params": {
          "tokenId": "token to check"
        }
      },
      "getTokenType(uint256)": {
        "details": "returns the token name for the given token as a string value",
        "params": {
          "tokenId": "token to check"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isConsumerRegistered(address)": {
        "details": "returns true if Consumers's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "isDealerRegistered(address)": {
        "details": "returns true if Dealer's account is registered",
        "params": {
          "account": "address of the dealer"
        }
      },
      "issue(address,uint8,uint256,uint256,uint256,uint256,string,string,string)": {
        "details": "External function to mint an amount of a token Only authorized dealer of associated token type can call this function",
        "params": {
          "quantity": "of the token to mint For ex: if one needs 100 full tokens, the caller should set the amount as (100 * 10^4) = 1,000,000 (assuming the token's decimals is set to 4)"
        }
      },
      "issueFromDAO(address,address,uint8,uint256,uint256,uint256,uint256,string,string,string)": {
        "details": "Issue function for DAO to use proposer as issuer Must be called from Timelock contract through a successful proposal"
      },
      "registerConsumer(address)": {
        "details": "returns true if Consumer's account is registered for the given token",
        "params": {
          "account": "address of the consumer"
        }
      },
      "registerDealer(address,uint8)": {
        "details": "Only contract owner can register Dealers",
        "params": {
          "account": "address of the dealer to register Only registered Dealers can transfer tokens"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "retire(uint256,uint256)": {
        "details": "sets the token to the retire state to disable transfers, mints and burns",
        "params": {
          "tokenId": "token to set in pause state   Only contract owner can pause or resume tokens"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transfer(address,uint256,uint256)": {
        "details": "transfers the value to the 'to' account for tokenId",
        "params": {
          "to": "recipient address",
          "tokenId": "tokenId for the transfer",
          "value": "amount of transfer Transfer can start only when both parties are registered and the token is not paused Note: Token holders can arbitrarily call safeTransferFrom() without these checks"
        }
      },
      "unregisterConsumer(address)": {
        "details": "Only contract owner can unregister Consumers",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "unregisterDealer(address,uint8)": {
        "details": "Only contract owner can unregister Dealers",
        "params": {
          "account": "address to be unregistered"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 671,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 677,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 679,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 45,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)41_storage)"
      },
      {
        "astId": 3098,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "limitedMode",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 3150,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_tokenDetails",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(CarbonTokenDetails)3146_storage)"
      },
      {
        "astId": 3156,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_retiredBalances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3162,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "timelock",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3164,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_numOfUniqueTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2094_storage"
      },
      {
        "astId": 3171,
        "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
        "label": "_TOKEN_TYPES",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)41_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)41_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(CarbonTokenDetails)3146_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NetEmissionsTokenNetwork.CarbonTokenDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonTokenDetails)3146_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2410_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2409,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2145_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CarbonTokenDetails)3146_storage": {
        "encoding": "inplace",
        "label": "struct NetEmissionsTokenNetwork.CarbonTokenDetails",
        "members": [
          {
            "astId": 3125,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3127,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "tokenTypeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3129,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuer",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3131,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "issuee",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3133,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "fromDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3135,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "thruDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3137,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "dateCreated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3139,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "automaticRetireDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3141,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "metadata",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 3143,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "manifest",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3145,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "description",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)2094_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)41_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2410_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2145_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2140,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2144,
            "contract": "contracts/NetEmissionsTokenNetwork.sol:NetEmissionsTokenNetwork",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}